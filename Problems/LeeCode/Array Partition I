Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

Example 1:
Input: [1,4,3,2]

Output: 4
Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).
Note:
n is a positive integer, which is in the range of [1, 10000].
All the integers in the array will be in the range of [-10000, 10000].

==============================================================================================================================

public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        
        int result=0;
        for (int i=0; i<nums.length; i+=2) {
            result = result + Math.min(nums[i], nums[i+1]); //result = result + nums[i];
        }
        return result;
}

P.S. Consume the second minimum number through the comparison with the the minimum number, so that the third minimum number can be added up. 
e.g. {1, 2, 3}
The sum of mins has to be the biggest, and it suggests that each Math.min has to the biggest.
So, Math.min(1,2)=1 rather than Math.min(1,3)=1 
    

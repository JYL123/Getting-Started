Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

================================================================================================================================
1. Brute force: O(n^2)
   1.1 Ugly btute force
   
      public static int[] twoSum(int[] nums, int target) {
        
        int[] result = new int[2];
        for(int x = 0; x< nums.length; x++) {
            for(int y = x + 1; y<nums.length; y++) {
                if( nums[x] + nums[y] == target) {
                    result[0] = x;
                    result[1] = y;
                
                    return result;
                }
            }
        }
        return result;
    }
  
 1.2 Better brute force
 public int[] twoSum(int[] nums, int target) {
    
    for (int i = 0; i < nums.length; i++) {
        for (int j = i + 1; j < nums.length; j++) {
            if (nums[j] == target - nums[i]) {
                return new int[] { i, j };
            }
        }
    }
    throw new IllegalArgumentException("No two sum solution");
  }
  
2. O(n) hash table: 

We reduce the look up time from O(n)O(n) to O(1)O(1) by trading space for speed. 
A hash table is built exactly for this purpose, it supports fast look up in near constant time. 
I say "near" because if a collision occurred, a look up could degenerate to O(n)O(n) time. 
But look up in hash table should be amortized O(1)O(1) time as long as the hash function was chosen carefully.  

public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        map.put(nums[i], i);
    }
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        if (map.containsKey(complement) && map.get(complement) != i) {
            return new int[] { i, map.get(complement) };
        }
    }
    throw new IllegalArgumentException("No two sum solution");
}

Complexity Analysis:

Time complexity : O(n)O(n). We traverse the list containing nn elements exactly twice. 
Since the hash table reduces the look up time to O(1)O(1), the time complexity is O(n)O(n).

Space complexity : O(n)O(n). The extra space required depends on the number of items stored in the hash table, 
which stores exactly nn elements.

3. One-pass Hash Table

While we iterate and inserting elements into the table, we also look back to check if current element's complement already exists in the table. 
If it exists, we have found a solution and return immediately.

public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        if (map.containsKey(complement)) {
            return new int[] { map.get(complement), i };
        }
        map.put(nums[i], i);
    }
    throw new IllegalArgumentException("No two sum solution");
}

Complexity Analysis:

Time complexity : O(n)O(n). We traverse the list containing nn elements only once. Each look up in the table costs only O(1)O(1) time.

Space complexity : O(n)O(n). The extra space required depends on the number of items stored in the hash table, 
which stores at most nn elements.

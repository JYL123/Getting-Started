Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.
Example 1: 
Input:

0 0 0
0 1 0
0 0 0
Output:
0 0 0
0 1 0
0 0 0
Example 2: 
Input:

0 0 0
0 1 0
1 1 1
Output:
0 0 0
0 1 0
1 2 1

Note:
1. The number of elements of the given matrix will not exceed 10,000.
2. There are at least one 0 in the given matrix.
3. The cells are adjacent in only four directions: up, down, left and right.

==============================================================================================================================
DP solution:
class Solution {
    final int MAX = 10001;
    
    public int[][] updateMatrix(int[][] matrix) {
        
        int[][] dist = new int[matrix.length][matrix[0].length];
        for(int i=0; i<dist.length; i++) {
            for(int j=0; j<dist[0].length; j++) {
                dist[i][j] = MAX;
            }
        }
            
        
        for (int i = 0; i<matrix.length; i++) {
            for (int j = 0; j<matrix[0].length; j++) {
                if (matrix[i][j] == 0) {
                    dist[i][j] = 0;
                } else {
                    if (i > 0)
                        dist[i][j] = Math.min(dist[i][j], dist[i-1][j]+1);
                    if (j > 0)
                        dist[i][j] = Math.min(dist[i][j], dist[i][j-1]+1);
                }
            }
        }
        
        for (int i = matrix.length - 1; i>=0; i--) {
            for (int j = matrix[0].length - 1; j>=0; j--) {
                if ( i < matrix.length -1 )
                    dist[i][j] = Math.min(dist[i][j], dist[i+1][j]+1);
                if (j < matrix[0].length -1 )
                    dist[i][j] = Math.min(dist[i][j], dist[i][j+1]+1);
            }
        }
        
        return dist;
    }
    
}

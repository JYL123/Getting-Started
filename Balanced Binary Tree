Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree 
in which the depth of the two subtrees of every node never differ by more than 1.
===============================================================================================================================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
class Solution {
    public boolean isBalanced(TreeNode root) {
        int left = 0;
        int right = 0;
        
        if(root == null) return true;   
        if(root.left == null) left = 0;
        if(root.right == null) right = 0;
              
        left = getHeight(root.left);
        right = getHeight(root.right);
        
        boolean isrightHeight = Math.abs(left-right) < 2 ? true : false;       
        boolean isBalancedLeft = isBalanced(root.left);
        boolean isBalancedRight = isBalanced(root.right);
               
        return isrightHeight && isBalancedLeft && isBalancedRight;        
    }
    
    public static int getHeight (TreeNode node) {
        
        int leftHeight=0;
        int rightHeight=0;
        
        if(node == null) return 0;
        
        if(node.left != null) leftHeight = getHeight(node.left);
        else leftHeight = 0;
        
        if(node.right != null) rightHeight = getHeight(node.right);
        else rightHeight = 0;
        
        return Math.max(leftHeight, rightHeight) + 1;
    }
}

Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.
==============================================================================================================================

//To be changed
//Why queue is not necessary here: it servers the purpose of a variable with large operations, so it is unnecessary. 
public int maxProfit(int[] prices) {
        Queue<Integer> buy = new LinkedList<Integer>();
        Queue<Integer> sell = new LinkedList<Integer>();
        
        //Always evaluate the first price
        if (prices.length != 0)
        buy.offer(prices[0]);
        
        for (int i = 1; i < prices.length; i++) {
            if(prices[i] < buy.peek()) {
                buy.poll();
                buy.offer(prices[i]);
            } else {
                if(sell.isEmpty()) {
                    sell.offer(prices[i]);
                }
                
                if (sell.peek() < prices[i]) {
                    sell.poll();
                    sell.offer(prices[i]);
                }
            }
        }
        
        if((!sell.isEmpty()) && (!buy.isEmpty()) ) return sell.poll() - buy.poll();
        else return 0; 
    }
    
    //One of the solutions in c:
    int maxProfit(vector<int>& prices) {
            const size_t len = prices.size();
            if (len <= 1) {
                return 0; //buy = sell 
            }
            int result = prices[1] - prices[0]; // assume day 1 - buy, day 2 - sell 
            int minPrice = prices[0]; // so the day 1 price becomes the min price to buy
            for (size_t i = 2; i < len; ++i) // starts from day 2 onwards ... 
            { 
                // compare each pair, choose a min price to be minPrice
                // the point is that, the min will always be min, so the rest is about find the max result, which is just price[i]-minPrice
                minPrice = std::min(prices[i - 1], minPrice); 
                if (result < prices[i] - minPrice) {
                    result = prices[i] - minPrice; // choose a bigger result as profit.               }
            }
            return result > 0 ? result : 0;
        }
   

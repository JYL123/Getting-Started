Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.

Example 1:
Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].
Note:
The range of node's value is in the range of 32-bit signed integer.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
==============================================================================================================================
import java.util.Queue; (outside of the class)

public List<Double> averageOfLevels(TreeNode root) {
        int counter = 0;
        List<Double> averageValue = new ArrayList<Double>();
        Queue<TreeNode> Q = new LinkedList<TreeNode>();
        Q.add(root);

        while(!Q.isEmpty()){
            counter = Q.size();
            double sum = 0;
            for (int i=0; i<counter; i++) {
                TreeNode currentNode = Q.remove();
                if(currentNode != null ) {
                    sum = sum + currentNode.val;
                }
                if(currentNode.left != null) {
                    Q.add(currentNode.left);
                }
                if(currentNode.right != null) {
                    Q.add(currentNode.right);
                }                          
            }
            Double average = sum/counter;
            averageValue.add(average);
            sum=0;
            counter=0;
        }
        
        return averageValue;
  }
